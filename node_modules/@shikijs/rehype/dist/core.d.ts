import { CodeOptionsThemes, TransformerOptions, CodeOptionsMeta, HighlighterGeneric } from 'shiki/core';
import { Element, Root } from 'hast';
import { BuiltinTheme } from 'shiki';
import { Plugin } from 'unified';

interface MapLike<K = any, V = any> {
    get: (key: K) => V | undefined;
    set: (key: K, value: V) => this;
}
interface RehypeShikiExtraOptions {
    /**
     * Add `language-*` class to code element
     *
     * @default false
     */
    addLanguageClass?: boolean;
    /**
     * Custom meta string parser
     * Return an object to merge with `meta`
     */
    parseMetaString?: (metaString: string, node: Element, tree: Root) => Record<string, any> | undefined | null;
    /**
     * Custom map to cache transformed codeToHast result
     *
     * @default undefined
     */
    cache?: MapLike;
    /**
     * Chance to handle the error
     * If not provided, the error will be thrown
     */
    onError?: (error: unknown) => void;
}
type RehypeShikiCoreOptions = CodeOptionsThemes<BuiltinTheme> & TransformerOptions & CodeOptionsMeta & RehypeShikiExtraOptions;
declare module 'hast' {
    interface Data {
        meta?: string;
    }
    interface Properties {
        metastring?: string;
    }
}
declare const rehypeShikiFromHighlighter: Plugin<[HighlighterGeneric<any, any>, RehypeShikiCoreOptions], Root>;

export { type MapLike, type RehypeShikiCoreOptions, type RehypeShikiExtraOptions, rehypeShikiFromHighlighter as default };
