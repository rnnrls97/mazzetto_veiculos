import { AllowedComponentProps } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { FocusTarget } from 'focus-trap';
import { FocusTargetOrFalse } from 'focus-trap';
import { FocusTargetValueOrFalse } from 'focus-trap';
import { FocusTrapTabbableOptions } from 'focus-trap';
import { MouseEventToBoolean } from 'focus-trap';
import { PropType } from 'vue';
import { RendererElement } from 'vue';
import { RendererNode } from 'vue';
import { VNode } from 'vue';
import { VNodeProps } from 'vue';

export declare const FocusTrap: DefineComponent<    {
active: {
type: BooleanConstructor;
default: boolean;
};
} & {
escapeDeactivates: {
type: BooleanConstructor;
default: true;
};
returnFocusOnDeactivate: {
type: BooleanConstructor;
default: true;
};
allowOutsideClick: {
type: PropType<boolean | MouseEventToBoolean | undefined>;
default: true;
};
clickOutsideDeactivates: PropType<boolean | MouseEventToBoolean | undefined>;
initialFocus: PropType<FocusTargetOrFalse | (() => void) | undefined>;
fallbackFocus: PropType<FocusTarget | undefined>;
checkCanFocusTrap: PropType<((containers: (HTMLElement | SVGElement)[]) => Promise<void>) | undefined>;
checkCanReturnFocus: PropType<((trigger: HTMLElement | SVGElement) => Promise<void>) | undefined>;
delayInitialFocus: {
type: BooleanConstructor;
default: true;
};
document: PropType<Document | undefined>;
preventScroll: BooleanConstructor;
setReturnFocus: PropType<FocusTargetValueOrFalse | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => FocusTargetValueOrFalse) | undefined>;
tabbableOptions: PropType<FocusTrapTabbableOptions | undefined>;
}, {
activate(): void;
deactivate(): void;
renderImpl(): VNode<RendererNode, RendererElement, {
[key: string]: any;
}> | VNode<RendererNode, RendererElement, {
[key: string]: any;
}>[] | null;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("update:active" | "activate" | "postActivate" | "deactivate" | "postDeactivate")[], "update:active" | "activate" | "postActivate" | "deactivate" | "postDeactivate", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
active: {
type: BooleanConstructor;
default: boolean;
};
} & {
escapeDeactivates: {
type: BooleanConstructor;
default: true;
};
returnFocusOnDeactivate: {
type: BooleanConstructor;
default: true;
};
allowOutsideClick: {
type: PropType<boolean | MouseEventToBoolean | undefined>;
default: true;
};
clickOutsideDeactivates: PropType<boolean | MouseEventToBoolean | undefined>;
initialFocus: PropType<FocusTargetOrFalse | (() => void) | undefined>;
fallbackFocus: PropType<FocusTarget | undefined>;
checkCanFocusTrap: PropType<((containers: (HTMLElement | SVGElement)[]) => Promise<void>) | undefined>;
checkCanReturnFocus: PropType<((trigger: HTMLElement | SVGElement) => Promise<void>) | undefined>;
delayInitialFocus: {
type: BooleanConstructor;
default: true;
};
document: PropType<Document | undefined>;
preventScroll: BooleanConstructor;
setReturnFocus: PropType<FocusTargetValueOrFalse | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => FocusTargetValueOrFalse) | undefined>;
tabbableOptions: PropType<FocusTrapTabbableOptions | undefined>;
}>> & {
onActivate?: ((...args: any[]) => any) | undefined;
onPostActivate?: ((...args: any[]) => any) | undefined;
onDeactivate?: ((...args: any[]) => any) | undefined;
onPostDeactivate?: ((...args: any[]) => any) | undefined;
"onUpdate:active"?: ((...args: any[]) => any) | undefined;
}, {
returnFocusOnDeactivate: boolean;
escapeDeactivates: boolean;
allowOutsideClick: boolean | MouseEventToBoolean | undefined;
preventScroll: boolean;
delayInitialFocus: boolean;
active: boolean;
}, {}>;

export { }
