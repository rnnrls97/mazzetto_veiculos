{
  "version": 3,
  "sources": ["../../filepond-plugin-image-edit/dist/filepond-plugin-image-edit.esm.js"],
  "sourcesContent": ["/*!\n * FilePondPluginImageEdit 1.6.3\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\nconst isPreviewableImage = file => /^image/.test(file.type);\n\n/**\n * Image Edit Proxy Plugin\n */\nconst plugin = _ => {\n  const { addFilter, utils, views } = _;\n  const { Type, createRoute, createItemAPI = item => item } = utils;\n  const { fileActionButton } = views;\n\n  addFilter(\n    'SHOULD_REMOVE_ON_REVERT',\n    (shouldRemove, { item, query }) =>\n      new Promise(resolve => {\n        const { file } = item;\n\n        // if this file is editable it shouldn't be removed immidiately even when instant uploading\n        const canEdit =\n          query('GET_ALLOW_IMAGE_EDIT') &&\n          query('GET_IMAGE_EDIT_ALLOW_EDIT') &&\n          isPreviewableImage(file);\n\n        // if the file cannot be edited it should be removed on revert\n        resolve(!canEdit);\n      })\n  );\n\n  // open editor when loading a new item\n  addFilter(\n    'DID_LOAD_ITEM',\n    (item, { query, dispatch }) =>\n      new Promise((resolve, reject) => {\n        // if is temp or local file\n        if (item.origin > 1) {\n          resolve(item);\n          return;\n        }\n\n        // get file reference\n        const { file } = item;\n        if (\n          !query('GET_ALLOW_IMAGE_EDIT') ||\n          !query('GET_IMAGE_EDIT_INSTANT_EDIT')\n        ) {\n          resolve(item);\n          return;\n        }\n\n        // exit if this is not an image\n        if (!isPreviewableImage(file)) {\n          resolve(item);\n          return;\n        }\n\n        const createEditorResponseHandler = (\n          item,\n          resolve,\n          reject\n        ) => userDidConfirm => {\n          // remove item\n          editRequestQueue.shift();\n\n          // handle item\n          if (userDidConfirm) {\n            resolve(item);\n          } else {\n            reject(item);\n          }\n\n          // TODO: Fix, should not be needed to kick the internal loop in case no processes are running\n          dispatch('KICK');\n\n          // handle next item!\n          requestEdit();\n        };\n\n        const requestEdit = () => {\n          if (!editRequestQueue.length) return;\n\n          const { item, resolve, reject } = editRequestQueue[0];\n\n          dispatch('EDIT_ITEM', {\n            id: item.id,\n            handleEditorResponse: createEditorResponseHandler(\n              item,\n              resolve,\n              reject\n            )\n          });\n        };\n\n        queueEditRequest({ item, resolve, reject });\n\n        if (editRequestQueue.length === 1) {\n          requestEdit();\n        }\n      })\n  );\n\n  // extend item methods\n  addFilter('DID_CREATE_ITEM', (item, { query, dispatch }) => {\n    item.extend('edit', () => {\n      dispatch('EDIT_ITEM', { id: item.id });\n    });\n  });\n\n  const editRequestQueue = [];\n  const queueEditRequest = editRequest => {\n    editRequestQueue.push(editRequest);\n    return editRequest;\n  };\n\n  // called for each view that is created right after the 'create' method\n  addFilter('CREATE_VIEW', viewAPI => {\n    // get reference to created view\n    const { is, view, query } = viewAPI;\n\n    if (!query('GET_ALLOW_IMAGE_EDIT')) return;\n\n    const canShowImagePreview = query('GET_ALLOW_IMAGE_PREVIEW');\n\n    // only run for either the file or the file info panel\n    const shouldExtendView =\n      (is('file-info') && !canShowImagePreview) ||\n      (is('file') && canShowImagePreview);\n\n    if (!shouldExtendView) return;\n\n    // no editor defined, then exit\n    const editor = query('GET_IMAGE_EDIT_EDITOR');\n    if (!editor) return;\n\n    // set default FilePond options and add bridge once\n    if (!editor.filepondCallbackBridge) {\n      editor.outputData = true;\n      editor.outputFile = false;\n      editor.filepondCallbackBridge = {\n        onconfirm: editor.onconfirm || (() => {}),\n        oncancel: editor.oncancel || (() => {})\n      };\n    }\n\n    // opens the editor, if it does not already exist, it creates the editor\n    const openEditor = ({ root, props, action }) => {\n      const { id } = props;\n      const { handleEditorResponse } = action;\n\n      // update editor props that could have changed\n      editor.cropAspectRatio =\n        root.query('GET_IMAGE_CROP_ASPECT_RATIO') || editor.cropAspectRatio;\n      editor.outputCanvasBackgroundColor =\n        root.query('GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR') ||\n        editor.outputCanvasBackgroundColor;\n\n      // get item\n      const item = root.query('GET_ITEM', id);\n      if (!item) return;\n\n      // file to open\n      const file = item.file;\n\n      // crop data to pass to editor\n      const crop = item.getMetadata('crop');\n      const cropDefault = {\n        center: {\n          x: 0.5,\n          y: 0.5\n        },\n        flip: {\n          horizontal: false,\n          vertical: false\n        },\n        zoom: 1,\n        rotation: 0,\n        aspectRatio: null\n      };\n\n      // size data to pass to editor\n      const resize = item.getMetadata('resize');\n\n      // filter and color data to pass to editor\n      const filter = item.getMetadata('filter') || null;\n      const filters = item.getMetadata('filters') || null;\n      const colors = item.getMetadata('colors') || null;\n      const markup = item.getMetadata('markup') || null;\n\n      // build parameters object\n      const imageParameters = {\n        crop: crop || cropDefault,\n        size: resize\n          ? {\n              upscale: resize.upscale,\n              mode: resize.mode,\n              width: resize.size.width,\n              height: resize.size.height\n            }\n          : null,\n        filter: filters\n          ? filters.id || filters.matrix\n          : root.query('GET_ALLOW_IMAGE_FILTER') &&\n            root.query('GET_IMAGE_FILTER_COLOR_MATRIX') &&\n            !colors\n          ? filter\n          : null,\n        color: colors,\n        markup\n      };\n\n      editor.onconfirm = ({ data }) => {\n        const { crop, size, filter, color, colorMatrix, markup } = data;\n\n        // create new metadata object\n        const metadata = {};\n\n        // append crop data\n        if (crop) {\n          metadata.crop = crop;\n        }\n\n        // append size data\n        if (size) {\n          const initialSize = (item.getMetadata('resize') || {}).size;\n          const targetSize = {\n            width: size.width,\n            height: size.height\n          };\n\n          if (!(targetSize.width && targetSize.height) && initialSize) {\n            targetSize.width = initialSize.width;\n            targetSize.height = initialSize.height;\n          }\n\n          if (targetSize.width || targetSize.height) {\n            metadata.resize = {\n              upscale: size.upscale,\n              mode: size.mode,\n              size: targetSize\n            };\n          }\n        }\n\n        if (markup) {\n          metadata.markup = markup;\n        }\n\n        // set filters and colors so we can restore them when re-editing the image\n        metadata.colors = color;\n        metadata.filters = filter;\n\n        // set merged color matrix to use in preview plugin\n        metadata.filter = colorMatrix;\n\n        // update crop metadata\n        item.setMetadata(metadata);\n\n        // call\n        editor.filepondCallbackBridge.onconfirm(data, createItemAPI(item));\n\n        // used in instant edit mode\n        if (!handleEditorResponse) return;\n        editor.onclose = () => {\n          handleEditorResponse(true);\n          editor.onclose = null;\n        };\n      };\n\n      editor.oncancel = () => {\n        // call\n        editor.filepondCallbackBridge.oncancel(createItemAPI(item));\n\n        // used in instant edit mode\n        if (!handleEditorResponse) return;\n        editor.onclose = () => {\n          handleEditorResponse(false);\n          editor.onclose = null;\n        };\n      };\n\n      editor.open(file, imageParameters);\n    };\n\n    /**\n     * Image Preview related\n     */\n\n    // create the image edit plugin, but only do so if the item is an image\n    const didLoadItem = ({ root, props }) => {\n      if (!query('GET_IMAGE_EDIT_ALLOW_EDIT')) return;\n\n      const { id } = props;\n\n      // try to access item\n      const item = query('GET_ITEM', id);\n      if (!item) return;\n\n      // get the file object\n      const file = item.file;\n\n      // exit if this is not an image\n      if (!isPreviewableImage(file)) return;\n\n      // handle interactions\n      root.ref.handleEdit = e => {\n        e.stopPropagation();\n        root.dispatch('EDIT_ITEM', { id });\n      };\n\n      if (canShowImagePreview) {\n        // add edit button to preview\n        const buttonView = view.createChildView(fileActionButton, {\n          label: 'edit',\n          icon: query('GET_IMAGE_EDIT_ICON_EDIT'),\n          opacity: 0\n        });\n\n        // edit item classname\n        buttonView.element.classList.add('filepond--action-edit-item');\n        buttonView.element.dataset.align = query(\n          'GET_STYLE_IMAGE_EDIT_BUTTON_EDIT_ITEM_POSITION'\n        );\n        buttonView.on('click', root.ref.handleEdit);\n\n        root.ref.buttonEditItem = view.appendChildView(buttonView);\n      } else {\n        // view is file info\n        const filenameElement = view.element.querySelector(\n          '.filepond--file-info-main'\n        );\n        const editButton = document.createElement('button');\n        editButton.className = 'filepond--action-edit-item-alt';\n        editButton.innerHTML =\n          query('GET_IMAGE_EDIT_ICON_EDIT') + '<span>edit</span>';\n        editButton.addEventListener('click', root.ref.handleEdit);\n        filenameElement.appendChild(editButton);\n\n        root.ref.editButton = editButton;\n      }\n    };\n\n    view.registerDestroyer(({ root }) => {\n      if (root.ref.buttonEditItem) {\n        root.ref.buttonEditItem.off('click', root.ref.handleEdit);\n      }\n      if (root.ref.editButton) {\n        root.ref.editButton.removeEventListener('click', root.ref.handleEdit);\n      }\n    });\n\n    const routes = {\n      EDIT_ITEM: openEditor,\n      DID_LOAD_ITEM: didLoadItem\n    };\n\n    if (canShowImagePreview) {\n      // view is file\n      const didPreviewUpdate = ({ root }) => {\n        if (!root.ref.buttonEditItem) return;\n        root.ref.buttonEditItem.opacity = 1;\n      };\n\n      routes.DID_IMAGE_PREVIEW_SHOW = didPreviewUpdate;\n    } else {\n    }\n\n    // start writing\n    view.registerWriter(createRoute(routes));\n  });\n\n  // Expose plugin options\n  return {\n    options: {\n      // enable or disable image editing\n      allowImageEdit: [true, Type.BOOLEAN],\n\n      // location of processing button\n      styleImageEditButtonEditItemPosition: ['bottom center', Type.STRING],\n\n      // open editor when image is dropped\n      imageEditInstantEdit: [false, Type.BOOLEAN],\n\n      // allow editing\n      imageEditAllowEdit: [true, Type.BOOLEAN],\n\n      // the icon to use for the edit button\n      imageEditIconEdit: [\n        '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8.5 17h1.586l7-7L15.5 8.414l-7 7V17zm-1.707-2.707l8-8a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-8 8A1 1 0 0 1 10.5 19h-3a1 1 0 0 1-1-1v-3a1 1 0 0 1 .293-.707z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n        Type.STRING\n      ],\n\n      // editor object\n      imageEditEditor: [null, Type.OBJECT]\n    }\n  };\n};\n\n// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\nconst isBrowser =\n  typeof window !== 'undefined' && typeof window.document !== 'undefined';\nif (isBrowser) {\n  document.dispatchEvent(\n    new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n  );\n}\n\nexport default plugin;\n"],
  "mappings": "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",
  "names": ["item", "resolve", "reject", "crop", "filter", "markup"]
}
