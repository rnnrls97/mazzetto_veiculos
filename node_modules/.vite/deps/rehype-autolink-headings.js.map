{
  "version": 3,
  "sources": ["../../rehype-autolink-headings/lib/index.js"],
  "sourcesContent": ["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hast-util-is-element').Test} Test\n */\n\n/**\n * @typedef {'after' | 'append' | 'before' | 'prepend' | 'wrap'} Behavior\n *   Behavior.\n *\n * @callback Build\n *   Generate content.\n * @param {Readonly<Element>} element\n *   Current heading.\n * @returns {Array<ElementContent> | ElementContent}\n *   Content.\n *\n * @callback BuildProperties\n *   Generate properties.\n * @param {Readonly<Element>} element\n *   Current heading.\n * @returns {Properties}\n *   Properties.\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior | null | undefined} [behavior='prepend']\n *   How to create links (default: `'prepend'`).\n * @property {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build | null | undefined} [content]\n *   Content to insert in the link (default: if `'wrap'` then `undefined`,\n *   otherwise `<span class=\"icon icon-link\"></span>`);\n *   if `behavior` is `'wrap'` and `Build` is passed, its result replaces the\n *   existing content, otherwise the content is added after existing content.\n * @property {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build | null | undefined} [group]\n *   Content to wrap the heading and link with, if `behavior` is `'after'` or\n *   `'before'` (optional).\n * @property {Readonly<Properties> | BuildProperties | null | undefined} [headingProperties]\n *   Extra properties to set on the heading (optional).\n * @property {Readonly<Properties> | BuildProperties | null | undefined} [properties]\n *   Extra properties to set on the link when injecting (default:\n *   `{ariaHidden: true, tabIndex: -1}` if `'append'` or `'prepend'`, otherwise\n *   `undefined`).\n * @property {Test | null | undefined} [test]\n *   Extra test for which headings are linked (optional).\n */\n\n/**\n * @template T\n *   Kind.\n * @typedef {(\n *   T extends Record<any, any>\n *     ? {-readonly [k in keyof T]: Cloneable<T[k]>}\n *     : T\n * )} Cloneable\n *   Deep clone.\n *\n *   See: <https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1237#issuecomment-1345515448>\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {convertElement} from 'hast-util-is-element'\nimport {SKIP, visit} from 'unist-util-visit'\n\n/** @type {Element} */\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add links from headings back to themselves.\n *\n * ###### Notes\n *\n * This plugin only applies to headings with `id`s.\n * Use `rehype-slug` to generate `id`s for headings that don’t have them.\n *\n * Several behaviors are supported:\n *\n * *   `'prepend'` (default) — inject link before the heading text\n * *   `'append'` — inject link after the heading text\n * *   `'wrap'` — wrap the whole heading text with the link\n * *   `'before'` — insert link before the heading\n * *   `'after'` — insert link after the heading\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeAutolinkHeadings(options) {\n  const settings = options || emptyOptions\n  let properties = settings.properties\n  const headingOroperties = settings.headingProperties\n  const behavior = settings.behavior || 'prepend'\n  const content = settings.content\n  const group = settings.group\n  const is = convertElement(settings.test)\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  let method\n\n  if (behavior === 'after' || behavior === 'before') {\n    method = around\n  } else if (behavior === 'wrap') {\n    method = wrap\n  } else {\n    method = inject\n\n    if (!properties) {\n      properties = {ariaHidden: 'true', tabIndex: -1}\n    }\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, 'element', function (node, index, parent) {\n      if (headingRank(node) && node.properties.id && is(node, index, parent)) {\n        Object.assign(node.properties, toProperties(headingOroperties, node))\n        return method(node, index, parent)\n      }\n    })\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function inject(node) {\n    const children = toChildren(content || contentDefaults, node)\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](\n      create(node, toProperties(properties, node), children)\n    )\n\n    return [SKIP]\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function around(node, index, parent) {\n    /* c8 ignore next -- uncommon */\n    if (typeof index !== 'number' || !parent) return\n\n    const children = toChildren(content || contentDefaults, node)\n    const link = create(node, toProperties(properties, node), children)\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (group) {\n      const grouping = toNode(group, node)\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes\n        nodes = [grouping]\n      }\n    }\n\n    parent.children.splice(index, 1, ...nodes)\n\n    return [SKIP, index + nodes.length]\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function wrap(node) {\n    /** @type {Array<ElementContent>} */\n    let before = node.children\n    /** @type {Array<ElementContent> | ElementContent} */\n    let after = []\n\n    if (typeof content === 'function') {\n      before = []\n      after = content(node)\n    } else if (content) {\n      after = clone(content)\n    }\n\n    node.children = [\n      create(\n        node,\n        toProperties(properties, node),\n        Array.isArray(after) ? [...before, ...after] : [...before, after]\n      )\n    ]\n\n    return [SKIP]\n  }\n}\n\n/**\n * Deep clone.\n *\n * @template T\n *   Kind.\n * @param {T} thing\n *   Thing to clone.\n * @returns {Cloneable<T>}\n *   Cloned thing.\n */\nfunction clone(thing) {\n  // Cast because it’s mutable now.\n  return /** @type {Cloneable<T>} */ (structuredClone(thing))\n}\n\n/**\n * Create an `a`.\n *\n * @param {Readonly<Element>} node\n *   Related heading.\n * @param {Properties | undefined} properties\n *   Properties to set on the link.\n * @param {Array<ElementContent>} children\n *   Content.\n * @returns {Element}\n *   Link.\n */\nfunction create(node, properties, children) {\n  return {\n    type: 'element',\n    tagName: 'a',\n    properties: {...properties, href: '#' + node.properties.id},\n    children\n  }\n}\n\n/**\n * Turn into children.\n *\n * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value\n *   Content.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Array<ElementContent>}\n *   Children.\n */\nfunction toChildren(value, node) {\n  const result = toNode(value, node)\n  return Array.isArray(result) ? result : [result]\n}\n\n/**\n * Turn into a node.\n *\n * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value\n *   Content.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Array<ElementContent> | ElementContent}\n *   Node.\n */\nfunction toNode(value, node) {\n  if (typeof value === 'function') return value(node)\n  return clone(value)\n}\n\n/**\n * Turn into properties.\n *\n * @param {Readonly<Properties> | BuildProperties | null | undefined} value\n *   Properties.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Properties}\n *   Properties.\n */\nfunction toProperties(value, node) {\n  if (typeof value === 'function') return value(node)\n  return value ? clone(value) : {}\n}\n"],
  "mappings": "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",
  "names": []
}
