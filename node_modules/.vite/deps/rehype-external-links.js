import {
  convertElement
} from "./chunk-XLRU4CHO.js";
import {
  parse
} from "./chunk-HUEPXUOB.js";
import {
  esm_default
} from "./chunk-CGU3XVSA.js";
import {
  visit
} from "./chunk-WZGD4VBS.js";
import "./chunk-LK32TJAX.js";

// node_modules/is-absolute-url/index.js
var ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\d+\-.]*?:/;
var WINDOWS_PATH_REGEX = /^[a-zA-Z]:\\/;
function isAbsoluteUrl(url) {
  if (typeof url !== "string") {
    throw new TypeError(`Expected a \`string\`, got \`${typeof url}\``);
  }
  if (WINDOWS_PATH_REGEX.test(url)) {
    return false;
  }
  return ABSOLUTE_URL_REGEX.test(url);
}

// node_modules/rehype-external-links/lib/index.js
var defaultProtocols = ["http", "https"];
var defaultRel = ["nofollow"];
var emptyOptions = {};
function rehypeExternalLinks(options) {
  const settings = options || emptyOptions;
  const protocols = settings.protocols || defaultProtocols;
  const is = convertElement(settings.test);
  return function(tree) {
    visit(tree, "element", function(node, index, parent) {
      if (node.tagName === "a" && typeof node.properties.href === "string" && is(node, index, parent)) {
        const url = node.properties.href;
        if (isAbsoluteUrl(url) ? protocols.includes(url.slice(0, url.indexOf(":"))) : url.startsWith("//")) {
          const contentRaw = createIfNeeded(settings.content, node);
          const content = contentRaw && !Array.isArray(contentRaw) ? [contentRaw] : contentRaw;
          const relRaw = createIfNeeded(settings.rel, node) || defaultRel;
          const rel = typeof relRaw === "string" ? parse(relRaw) : relRaw;
          const target = createIfNeeded(settings.target, node);
          const properties = createIfNeeded(settings.properties, node);
          if (properties) {
            Object.assign(node.properties, esm_default(properties));
          }
          if (rel.length > 0) {
            node.properties.rel = [...rel];
          }
          if (target) {
            node.properties.target = target;
          }
          if (content) {
            const properties2 = createIfNeeded(settings.contentProperties, node) || {};
            node.children.push({
              type: "element",
              tagName: "span",
              properties: esm_default(properties2),
              children: esm_default(content)
            });
          }
        }
      }
    });
  };
}
function createIfNeeded(value, element) {
  return typeof value === "function" ? value(element) : value;
}
export {
  rehypeExternalLinks as default
};
//# sourceMappingURL=rehype-external-links.js.map
