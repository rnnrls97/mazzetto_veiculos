export declare type SelectionDirectionType = 'backward' | 'forward' | 'none';
export declare type Selection = {
    /**
     * List of lines that have been selected
     * @note line is considered selected even if it is partially selected
     * */
    lines: Line[];
    text: string;
    selectionStart: number;
    selectionEnd: number;
    selectionDirection: SelectionDirectionType;
};
declare type SelectRange = {
    start: number;
    end: number;
};
declare type SelectRelative = {
    fromCurrentStart: number;
    fromCurrentEnd: number;
};
export declare type Line = {
    text: string;
    lineNumber: number;
    /** Index of the first character of the string */
    startsAt: number;
    /**
     * Index of the and of the line (includes the characters up to)
     * */
    endsAt: number;
};
export declare type Position = {
    line: Line;
    /** Starting cursor position */
    cursorAt: number;
};
export declare type WrapOptions = {
    unwrap?: boolean;
    placeholder?: string;
};
declare type Marker = string & {
    __brand: 'Cursor marker';
};
declare const MARKER: Marker;
/**
 * Util for manipulation with textarea content and text selection
 */
export declare class Cursor {
    private element;
    static MARKER: Marker;
    MARKER: typeof MARKER;
    constructor(element: HTMLTextAreaElement);
    get value(): string;
    /** @returns {Line[]} information about each line of text */
    get lines(): Line[];
    /** @returns {Selection} information about current selection */
    get selection(): Selection | null;
    /** @returns {Position} information about current position */
    get position(): Position;
    setValue(text: string): void;
    /**
     * @returns {Line} information about line
     * */
    lineAt(lineNumber: number): Line | null;
    /**
     * Insert text at the cursor position.
     * if some content is selected will replace it
     */
    insert(content: string): void;
    private insertAtCursor;
    /**
     * Replace all selected lines
     * if nothing is selected will replace the current line
     *
     * @param callback - The map function will be called once for each selected line and will replace the contents of the line with the result of the call
     * @note line is considered as selected even if it is partially selected
     */
    replaceCurrentLines(callback: (this: Cursor, line: Line, index: number, currentLines: Line[]) => string | null, options?: {
        selectReplaced?: boolean;
    }): void;
    /**
     * TODO
     * replace
     */
    replaceLine(lineNumber: number, content: string | null): void;
    /**
     * Wraps selection inside markup
     */
    wrap(markup: string | [string, string], options?: WrapOptions): void;
    private isSelectedWrappedWith;
    select(options: SelectRange | SelectRelative): void;
    private normalizeSelection;
    private execRaw;
}
export {};
