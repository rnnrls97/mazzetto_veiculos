var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { blockQuotesCommandHandler, boldCommandHandler, codeBlockCommandHandler, codeInlineCommandHandler, codeCommandHandler, createHeadlineCommandHandler, imageCommandHandler, italicCommandHandler, linkCommandHandler, orderedListCommandHandler, strikeThroughCommandHandler, unorderedListCommandHandler, } from './handlers';
import { metaCombination } from './utils';
export var buildInCommands = [
    {
        shortcut: metaCombination('b'),
        handler: boldCommandHandler,
        name: 'bold',
    },
    {
        shortcut: metaCombination('i'),
        handler: italicCommandHandler,
        name: 'italic',
    },
    {
        name: 'link',
        handler: linkCommandHandler,
    },
    {
        name: 'image',
        handler: imageCommandHandler,
    },
    {
        name: 'unordered-list',
        handler: unorderedListCommandHandler,
    },
    {
        name: 'ordered-list',
        handler: orderedListCommandHandler,
    },
    {
        name: 'code-block',
        handler: codeBlockCommandHandler,
    },
    {
        name: 'code-inline',
        handler: codeInlineCommandHandler,
    },
    {
        name: 'code',
        handler: codeCommandHandler,
    },
    {
        name: 'block-quotes',
        handler: blockQuotesCommandHandler,
    },
    {
        shortcut: __spreadArray(__spreadArray([], metaCombination('shift', 'x'), true), ['alt+shift+f5'], false),
        name: 'strike-through',
        handler: strikeThroughCommandHandler,
    },
    {
        name: 'h1',
        handler: createHeadlineCommandHandler(1),
    },
    {
        name: 'h2',
        handler: createHeadlineCommandHandler(2),
    },
    {
        name: 'h3',
        handler: createHeadlineCommandHandler(3),
    },
    {
        name: 'h4',
        handler: createHeadlineCommandHandler(4),
    },
    {
        name: 'h5',
        handler: createHeadlineCommandHandler(5),
    },
    {
        name: 'h6',
        handler: createHeadlineCommandHandler(6),
    },
];
