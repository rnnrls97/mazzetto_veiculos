import { MutableRefObject } from 'react';
export declare const metaCombination: (...keys: string[]) => string[];
export declare const clamp: (val: number, min: number, max: number) => number;
export declare const findLast: <T>(array: T[], predicate: (value: T, index: number, obj: T[]) => boolean) => T;
export declare const trimChars: (text: string, chars: string) => string;
export declare const isBtwOrEq: (value: number, a: number, b: number) => boolean;
/**
 * @param {HTMLTextAreaElement|HTMLInputElement} input
 * @param {string} value
 * @returns {void}
 */
export declare function fireInput(input: HTMLTextAreaElement | HTMLInputElement, value: string): void;
/**
 * 1. -> 2.
 * 1.1. -> 1.2.
 */
export declare const getIncrementedOrderedListPrefix: (prefix: string) => string;
export declare const isRefObject: <TAttributes extends unknown>(ref: import("react").Ref<TAttributes>) => ref is MutableRefObject<TAttributes>;
/** Will try to find textarea or throws an Error  */
export declare const findTextArea: (element: Element | null) => HTMLTextAreaElement;
export declare function escapeRegExp(str: string): string;
export declare const isURL: (value: unknown) => value is string;
export declare const isImageURL: (value: unknown) => value is string;
export declare class HistoryStack<T> {
    private limit;
    private items;
    constructor(limit: number);
    push(item: T): void;
    peek(n: number): T;
    pop(): T;
}
