var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, Fragment, useEffect, useRef } from 'react';
import { bootstrapTextareaMarkdown } from './bootstrap';
import { findTextArea, isRefObject } from './utils';
/**
 * Enhanced textarea element with markdown formatting features
 */
export var TextareaMarkdown = forwardRef(function (_a, ref) {
    var commands = _a.commands, options = _a.options, props = __rest(_a, ["commands", "options"]);
    var textareaRef = useRef(null);
    useBootstrap({
        ref: ref,
        options: options,
        commands: commands,
        textareaRef: textareaRef,
    });
    return React.createElement("textarea", __assign({ ref: textareaRef }, props));
});
/**
 * Allows you to wrap a custom textarea component
 */
var TextareaMarkdownWrapper = forwardRef(function (_a, ref) {
    var children = _a.children, commands = _a.commands, options = _a.options;
    var textareaRef = useRef();
    var holderElementRef = useRef(null);
    useEffect(function () {
        if (!textareaRef.current && holderElementRef.current) {
            if (React.Children.count(children) !== 1) {
                throw new TypeError('TextareaMarkdownWrapper: expected single react-element as a child');
            }
            textareaRef.current = findTextArea(holderElementRef.current.previousElementSibling);
        }
    }, [children]);
    useBootstrap({
        ref: ref,
        options: options,
        commands: commands,
        textareaRef: textareaRef,
    });
    return (React.createElement(Fragment, null,
        children,
        React.createElement("div", { style: { display: 'none' }, ref: holderElementRef })));
});
TextareaMarkdown.Wrapper = TextareaMarkdownWrapper;
var useBootstrap = function (_a) {
    var commands = _a.commands, options = _a.options, ref = _a.ref, textareaRef = _a.textareaRef;
    useEffect(function () {
        if (!textareaRef.current) {
            return;
        }
        var _a = bootstrapTextareaMarkdown(textareaRef.current, {
            commands: commands,
            options: options,
        }), dispose = _a.dispose, trigger = _a.trigger, cursor = _a.cursor;
        // initialize the TextareaMarkdown ref
        if (isRefObject(ref)) {
            ref.current = Object.assign(textareaRef.current, { trigger: trigger, cursor: cursor });
        }
        return dispose;
        // reinitialize only on demand
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [JSON.stringify({ commands: commands, options: options })]);
};
